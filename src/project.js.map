{"version":3,"sources":["Applications/CocosCreator.app/Contents/Resources/app.asar/node_modules/browser-pack/_prelude.js","Script/abstacle.js","project.js","Script/chess.js","Script/collid.js","Script/config.js","Script/game.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","abstacle","module","cc","_RFpush","_collid","Class","extends","Component","properties","otherBall","undefined","mass","velocityX","velocityY","bumpAudio","default","url","AudioClip","onCollisionEnter","other","self","log","otherChess","getComponent","this","ballSelf","ballFactory","node","x","y","ballOther","balls","collideBalls","audioEngine","playEffect","onLoad","onDestroy","update","dt","_RFpop","./collid","./config","chess","_config","color","dropAudio","world","draw","minIndicatorWidth","maxIndicatorWidth","instantVx","instantVy","breathState","opacityCopy","judgeOut","needDestroy","opacity","playdropSound","jellyOut","removeSelf","destroy","bounce","onMove","drawIndicator","to","width","distance","maxlength","k","b","p","from","getPosition","worldTo","parent","convertToNodeSpaceAR","worldToInvert","lineLength","pDistance","sinFT","config","point1","point2","isFinite","g","p2","sqrt","Math","D","x1","x2","pDistanceSQ","pRotateByAngle","PI","arrowLength","angle","clear","strokeWidth","drawSegment","Color","WHITE","pointOnLine","arrowToPoint1","arrowToPoint2","drawDot","BLUE","lengthScaleVelocity","clearIndicator","event","onTouchStart","changeChessBreath","getLocation","onTouchMove","onTouchEndAndCancel","otherThis","playbumpSound","setListeners","on","Node","EventType","TOUCH_START","TOUCH_MOVE","TOUCH_END","TOUCH_CANCEL","clearListeners","off","minusVelocityByFriction","v","gravity","frictionCoefficient","max","min","breath","deltaTime","top","bottom","breathTime","deltaOpacity","collid","collisionObj","ball1","ball2","JSON","parse","stringify","dx","dy","collisionAngle","atan2","speed1","speed2","direction1","direction2","velocityX_1","cos","velocityY_1","sin","velocityX_2","velocityY_2","final_velocityX_1","final_velocityX_2","final_velocityY_1","final_velocityY_2","Object","defineProperty","value","maxVelocity","size","small","scale","medium","big","game","greenJellyPrefab","type","Prefab","redJellyPrefab","victoryPrefab","failurePrefab","restartPrefab","greenCnt","redCnt","firstChess","nowChess","isMoving","setCollision","manager","director","getCollisionManager","enabled","setDrawNode","DrawNode","_sgNode","addChild","checkGameEnd","spawnNewBanner","instantiate","changeChessListener","soawnRestartButton","banner","setPosition","rotation","restart","onButtonTouchStart","mapChess","children","state","newGame","spawnJellies","jellies","name","xbias","ybias","item","jelly","toggleCheese","cheese","removeAllChildren","checkAllStop","onMoveEnd"],"mappings":"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","file":"project.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\ncc._RFpush(module, '5bb87EqjMRLM6cZAct1WKvO', 'abstacle');\n// Script/abstacle.js\n\nvar _collid = require('./collid');\n\nvar _config = require('./config');\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        otherBall: undefined,\n        mass: 9999999999999999,\n        velocityX: 0,\n        velocityY: 0,\n        bumpAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    onCollisionEnter: function onCollisionEnter(other, self) {\n        // cc.log(self,other);\n        // cc.log('name',self.node.name);\n\n        cc.log('a');\n\n        var otherChess = other.getComponent(\"chess\");\n        if (otherChess.otherBall) {\n            this.velocityX = otherChess.otherBall.velocityX;\n            this.velocityY = otherChess.otherBall.velocityY;\n            otherChess.otherBall = undefined;\n            return;\n        }\n        var ballSelf = (0, _collid.ballFactory)(this.node.x, this.node.y, this.velocityX, this.velocityY, this.mass);\n        var ballOther = (0, _collid.ballFactory)(other.node.x, other.node.y, otherChess.velocityX, otherChess.velocityY, otherChess.mass);\n        var balls = (0, _collid.collideBalls)(ballSelf, ballOther);\n        this.otherBall = balls.other;\n\n        cc.audioEngine.playEffect(this.bumpAudio, false);\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    onDestroy: function onDestroy() {},\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {}\n});\n\ncc._RFpop();","require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"abstacle\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '5bb87EqjMRLM6cZAct1WKvO', 'abstacle');\n// Script/abstacle.js\n\nvar _collid = require('./collid');\n\nvar _config = require('./config');\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        otherBall: undefined,\n        mass: 9999999999999999,\n        velocityX: 0,\n        velocityY: 0,\n        bumpAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    onCollisionEnter: function onCollisionEnter(other, self) {\n        // cc.log(self,other);\n        // cc.log('name',self.node.name);\n\n        cc.log('a');\n\n        var otherChess = other.getComponent(\"chess\");\n        if (otherChess.otherBall) {\n            this.velocityX = otherChess.otherBall.velocityX;\n            this.velocityY = otherChess.otherBall.velocityY;\n            otherChess.otherBall = undefined;\n            return;\n        }\n        var ballSelf = (0, _collid.ballFactory)(this.node.x, this.node.y, this.velocityX, this.velocityY, this.mass);\n        var ballOther = (0, _collid.ballFactory)(other.node.x, other.node.y, otherChess.velocityX, otherChess.velocityY, otherChess.mass);\n        var balls = (0, _collid.collideBalls)(ballSelf, ballOther);\n        this.otherBall = balls.other;\n\n        cc.audioEngine.playEffect(this.bumpAudio, false);\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    onDestroy: function onDestroy() {},\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {}\n});\n\ncc._RFpop();\n},{\"./collid\":\"collid\",\"./config\":\"config\"}],\"chess\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'a757adOSftILZOVo213y/Ih', 'chess');\n// Script/chess.js\n\nvar _collid = require('./collid');\n\nvar _config = require('./config');\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        color: {\n            'default': ''\n        },\n        bumpAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n        dropAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n        world: undefined,\n        velocityX: 0,\n        velocityY: 5,\n        otherBall: undefined,\n        mass: 5,\n        // gravity: 9.8,\n        // frictionCoefficient: 0.005,\n        draw: undefined,\n        // maxVelocity: 20,\n        // lengthScaleVelocity: 7.5,\n        // maxlength: 150,\n        minIndicatorWidth: 1.5,\n        maxIndicatorWidth: 6,\n        instantVx: 0,\n        instantVy: 0,\n        breathState: 'up', // up down stop\n        opacityCopy: undefined\n    },\n\n    judgeOut: function judgeOut() {\n        var x = this.node.x;\n        var y = this.node.y;\n\n        var needDestroy = false;\n\n        if (-320 < x < -250) {\n            this.node.opacity = 1.5 * (-x - 282);\n        } else if (x < -319) {\n            needDestroy = true;\n        } else if (320 > x > 260) {\n            this.node.opacity = 1.7 * (x - 260);\n        } else if (x > 319) {\n            needDestroy = true;\n        }\n\n        if (-610 < y < -580) {\n            this.node.opacity = 3.4 * (-y - 580);\n        } else if (y < -609) {\n            needDestroy = true;\n        } else if (630 > y > 590) {\n            this.node.opacity = 2.5 * (y - 590);\n        } else if (y > 629) {\n            needDestroy = true;\n        }\n\n        if (needDestroy) {\n            this.playdropSound();\n            // cc.log('out',this.color);\n            this.world.jellyOut(this.color);\n            cc.removeSelf();\n            this.node.destroy();\n        }\n    },\n\n    bounce: function bounce() {\n        this.velocityX = this.instantVx;\n        this.velocityY = this.instantVy;\n        this.world.onMove();\n    },\n\n    drawIndicator: function drawIndicator(to) {\n        function width(distance, maxlength, minIndicatorWidth, maxIndicatorWidth) {\n            var k = (minIndicatorWidth - maxIndicatorWidth) / (maxlength - 0);\n            var b = maxIndicatorWidth;\n            return k * distance + b;\n        }\n\n        to = cc.p(to.x, to.y);\n        var from = this.node.getPosition();\n        var worldTo = this.node.parent.convertToNodeSpaceAR(to);\n        var worldToInvert = undefined;\n\n        var lineLength = cc.pDistance(from, worldTo);\n        var k = (worldTo.y - from.y) / (worldTo.x - from.x);\n        var b = worldTo.y - k * worldTo.x;\n        var sinFT = (worldTo.x - from.x) / lineLength;\n\n        if (lineLength > _config.config.maxlength) {\n            lineLength = _config.config.maxlength;\n\n            var point1 = undefined,\n                point2 = undefined;\n            if (!isFinite(k)) {\n                point1 = cc.p(from.x, from.y + _config.config.maxlength);\n                point2 = cc.p(from.x, from.y - _config.config.maxlength);\n            } else {\n                var f = from.x;\n                var g = from.y;\n                var r = _config.config.maxlength;\n                var p2 = function p2(x) {\n                    return x * x;\n                };\n                var sqrt = function sqrt(x) {\n                    return Math.sqrt(x);\n                };\n\n                var D = sqrt(-p2(b) - 2 * b * f * k + 2 * b * g - p2(f) * p2(k) + 2 * f * g * k - p2(g) + p2(k) * p2(r) + p2(r));\n                var x1 = (-D - b * k + f + g * k) / (p2(k) + 1);\n                var x2 = (D - b * k + f + g * k) / (p2(k) + 1);\n\n                point1 = cc.p(x1, k * x1 + b);\n                point2 = cc.p(x2, k * x2 + b);\n            }\n            if (cc.pDistanceSQ(point1, worldTo) < cc.pDistanceSQ(point2, worldTo)) {\n                worldTo = point1;\n                worldToInvert = point2;\n            } else {\n                worldTo = point2;\n                worldToInvert = point1;\n            }\n        } else {\n            worldToInvert = cc.pRotateByAngle(worldTo, from, Math.PI);\n        }\n        var arrowLength = 20;\n        var angle = Math.PI / 6;\n\n        this.world.draw.clear();\n\n        var strokeWidth = width(lineLength, _config.config.maxlength, this.minIndicatorWidth, this.maxIndicatorWidth);\n        this.world.draw.drawSegment(from, worldTo, strokeWidth, cc.Color.WHITE);\n\n        // console.log('2', 'sinFT', sinFT, 'k', k, 'b', b);\n        var pointOnLine = undefined;\n        if (!isFinite(k)) {\n            pointOnLine = cc.p(worldToInvert.x, worldToInvert + arrowLength);\n        } else {\n            var x = worldToInvert.x + arrowLength * sinFT;\n            var y = k * x + b;\n            pointOnLine = cc.p(x, y);\n        }\n\n        var arrowToPoint1 = cc.pRotateByAngle(pointOnLine, worldToInvert, angle);\n        var arrowToPoint2 = cc.pRotateByAngle(pointOnLine, worldToInvert, -angle);\n        this.world.draw.drawSegment(worldToInvert, arrowToPoint1, strokeWidth, cc.Color.WHITE);\n        this.world.draw.drawSegment(worldToInvert, arrowToPoint2, strokeWidth, cc.Color.WHITE);\n        this.world.draw.drawSegment(from, worldToInvert, strokeWidth, cc.Color.WHITE);\n        this.world.draw.drawDot(worldTo, strokeWidth * 2, cc.Color.BLUE);\n\n        this.instantVy = (worldToInvert.y - from.y) / _config.config.lengthScaleVelocity;\n        this.instantVx = (worldToInvert.x - from.x) / _config.config.lengthScaleVelocity;\n    },\n\n    clearIndicator: function clearIndicator(event) {\n        this.world.draw.clear();\n    },\n\n    onTouchStart: function onTouchStart(event) {\n        this.world.changeChessBreath(this.color, false, 220);\n        // this.opacityCopy = this.node.opacity;\n        this.node.opacity = 100;\n        this.drawIndicator(event.getLocation());\n    },\n\n    onTouchMove: function onTouchMove(event) {\n        this.drawIndicator(event.getLocation());\n    },\n\n    onTouchEndAndCancel: function onTouchEndAndCancel(event) {\n        // cc.log(\"onTouchEnd\", event);\n        this.node.opacity = 220;\n        this.clearIndicator();\n        this.bounce();\n    },\n\n    onCollisionEnter: function onCollisionEnter(other, self) {\n\n        var otherThis = other.getComponent(\"chess\");\n\n        if (!otherThis) {\n            otherThis = other.getComponent(\"abstacle\");\n        }\n\n        if (otherThis.otherBall) {\n            this.velocityX = otherThis.otherBall.velocityX;\n            this.velocityY = otherThis.otherBall.velocityY;\n            otherThis.otherBall = undefined;\n            return;\n        }\n        this.playbumpSound();\n        var ballSelf = (0, _collid.ballFactory)(this.node.x, this.node.y, this.velocityX, this.velocityY, this.mass);\n        var ballOther = (0, _collid.ballFactory)(other.node.x, other.node.y, otherThis.velocityX, otherThis.velocityY, otherThis.mass);\n        var balls = (0, _collid.collideBalls)(ballSelf, ballOther);\n        this.velocityX = balls.self.velocityX;\n        this.velocityY = balls.self.velocityY;\n        this.otherBall = balls.other;\n    },\n\n    playbumpSound: function playbumpSound() {\n        cc.audioEngine.playEffect(this.bumpAudio, false);\n    },\n    playdropSound: function playdropSound() {\n        cc.audioEngine.playEffect(this.dropAudio, false);\n    },\n\n    setListeners: function setListeners() {\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEndAndCancel, this);\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEndAndCancel, this);\n    },\n\n    clearListeners: function clearListeners() {\n        this.node.off(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\n        this.node.off(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        this.node.off(cc.Node.EventType.TOUCH_END, this.onTouchEndAndCancel, this);\n        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEndAndCancel, this);\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.setListeners();\n    },\n\n    onDestroy: function onDestroy() {\n        this.clearListeners();\n    },\n\n    minusVelocityByFriction: function minusVelocityByFriction(v) {\n        var g = _config.config.gravity,\n            u = _config.config.frictionCoefficient;\n        if (v > 0) {\n            return Math.max(0, v - g * u);\n        }\n\n        if (v === 0) {\n            return 0;\n        }\n\n        if (v < 0) {\n            return Math.min(0, v + g * u);\n        }\n    },\n\n    breath: function breath(deltaTime) {\n        // cc.log('state',this.breathState);\n        // cc.log('')\n        var top = 220;\n        var bottom = 100;\n        var breathTime = 2;\n        if (this.breathState === 'stop') {\n            return;\n        }\n        var deltaOpacity = (top - bottom) / breathTime * deltaTime;\n        // cc.log('dt',deltaTime,'do',deltaOpacity)\n        if (this.breathState === 'up') {\n            // cc.log('up');\n            this.node.opacity = Math.min(this.node.opacity + deltaOpacity, top);\n            this.breathState = this.node.opacity === top ? 'down' : 'up';\n        } else if (this.breathState === 'down') {\n            // cc.log('down');\n            this.node.opacity = Math.max(this.node.opacity - deltaOpacity, bottom);\n            // cc.log('opacity',this.node.opacity);\n            this.breathState = this.node.opacity === bottom ? 'up' : 'down';\n        }\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        this.breath(dt);\n\n        this.node.x += this.velocityX;\n        this.node.y += this.velocityY;\n\n        this.velocityX = this.minusVelocityByFriction(this.velocityX);\n        this.velocityY = this.minusVelocityByFriction(this.velocityY);\n\n        this.judgeOut();\n    }\n});\n\ncc._RFpop();\n},{\"./collid\":\"collid\",\"./config\":\"config\"}],\"collid\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '01aa1hC3TxO9Kbjnthibx9c', 'collid');\n// Script/collid.js\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ballFactory = ballFactory;\nexports.collideBalls = collideBalls;\n\nfunction ballFactory(x, y, velocityX, velocityY, mass) {\n    var collisionObj = {};\n    collisionObj.x = x;\n    collisionObj.y = y;\n    // collisionObj.x = x;\n    // collisionObj.y = y;\n    // collisionObj.radius = radius;\n    // collisionObj.speed = speed;\n    // collisionObj.angle = angle;\n    collisionObj.velocityX = velocityX;\n    collisionObj.velocityY = velocityY;\n    collisionObj.mass = mass;\n    return collisionObj;\n}\n\nfunction collideBalls(ball1, ball2) {\n\n    // console.log('ball1',ball1,'ball2',ball2);\n    ball1 = JSON.parse(JSON.stringify(ball1));\n    ball2 = JSON.parse(JSON.stringify(ball2));\n\n    var dx = ball1.x - ball2.x;\n    var dy = ball1.y - ball2.y;\n\n    var collisionAngle = Math.atan2(dy, dx);\n\n    var speed1 = Math.sqrt(ball1.velocityX * ball1.velocityX + ball1.velocityY * ball1.velocityY);\n    var speed2 = Math.sqrt(ball2.velocityX * ball2.velocityX + ball2.velocityY * ball2.velocityY);\n\n    var direction1 = Math.atan2(ball1.velocityY, ball1.velocityX);\n    var direction2 = Math.atan2(ball2.velocityY, ball2.velocityX);\n\n    var velocityX_1 = speed1 * Math.cos(direction1 - collisionAngle);\n    var velocityY_1 = speed1 * Math.sin(direction1 - collisionAngle);\n    var velocityX_2 = speed2 * Math.cos(direction2 - collisionAngle);\n    var velocityY_2 = speed2 * Math.sin(direction2 - collisionAngle);\n\n    var final_velocityX_1 = ((ball1.mass - ball2.mass) * velocityX_1 + (ball2.mass + ball2.mass) * velocityX_2) / (ball1.mass + ball2.mass);\n    var final_velocityX_2 = ((ball1.mass + ball1.mass) * velocityX_1 + (ball2.mass - ball1.mass) * velocityX_2) / (ball1.mass + ball2.mass);\n\n    var final_velocityY_1 = velocityY_1;\n    var final_velocityY_2 = velocityY_2;\n\n    ball1.velocityX = Math.cos(collisionAngle) * final_velocityX_1 + Math.cos(collisionAngle + Math.PI / 2) * final_velocityY_1;\n    ball1.velocityY = Math.sin(collisionAngle) * final_velocityX_1 + Math.sin(collisionAngle + Math.PI / 2) * final_velocityY_1;\n    ball2.velocityX = Math.cos(collisionAngle) * final_velocityX_2 + Math.cos(collisionAngle + Math.PI / 2) * final_velocityY_2;\n    ball2.velocityY = Math.sin(collisionAngle) * final_velocityX_2 + Math.sin(collisionAngle + Math.PI / 2) * final_velocityY_2;\n\n    return {\n        self: ball1,\n        other: ball2\n    };\n}\n\ncc._RFpop();\n},{}],\"config\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '35a6cEY/ZNNNpab0MNhHwnJ', 'config');\n// Script/config.js\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar config = (function () {\n    var maxVelocity = 15,\n        maxlength = 150,\n        lengthScaleVelocity = maxlength / maxVelocity,\n        gravity = 9.8,\n        frictionCoefficient = 0.005;\n\n    return {\n        maxVelocity: maxVelocity,\n        maxlength: maxlength,\n        lengthScaleVelocity: lengthScaleVelocity,\n        gravity: gravity,\n        frictionCoefficient: frictionCoefficient,\n        size: {\n            small: {\n                scale: 0.3,\n                mass: 2\n            },\n            medium: {\n                scale: 0.4,\n                mass: 5\n            },\n            big: {\n                scale: 0.6,\n                mass: 10\n            }\n        }\n    };\n})();\nexports.config = config;\n\ncc._RFpop();\n},{}],\"game\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'b41ffrKsfZKiIM9N/TEIHCC', 'game');\n// Script/game.js\n\nvar _config = require('./config');\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        greenJellyPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        redJellyPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        world: {\n            'default': null\n        },\n        victoryPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        failurePrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        restartPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        draw: undefined,\n        greenCnt: 0,\n        redCnt: 0,\n        firstChess: \"green\",\n        nowChess: undefined,\n        isMoving: false\n    },\n\n    setCollision: function setCollision() {\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n        // manager.enabledDebugDraw = true;\n    },\n\n    setDrawNode: function setDrawNode() {\n        this.draw = new cc.DrawNode();\n        this.node._sgNode.addChild(this.draw);\n    },\n\n    jellyOut: function jellyOut(color) {\n        if (color === 'red') {\n            // cc.log('red before', this.redCnt);\n\n            this.redCnt -= 1;\n            // cc.log('red', this.redCnt);\n        } else {\n                // cc.log('green before',this.greenCnt);\n\n                this.greenCnt -= 1;\n                // cc.log('green',this.greenCnt);\n            }\n\n        this.checkGameEnd();\n    },\n\n    checkGameEnd: function checkGameEnd() {\n        if (this.redCnt <= 0 && this.greenCnt > 0) {\n            this.spawnNewBanner(cc.instantiate(this.failurePrefab), 1);\n            this.spawnNewBanner(cc.instantiate(this.victoryPrefab), 0);\n            this.changeChessListener(undefined, false);\n            this.soawnRestartButton();\n        } else if (this.greenCnt <= 0 && this.redCnt > 0) {\n            this.spawnNewBanner(cc.instantiate(this.failurePrefab), 0);\n            this.spawnNewBanner(cc.instantiate(this.victoryPrefab), 1);\n            this.changeChessListener(undefined, false);\n            this.soawnRestartButton();\n        }\n    },\n\n    spawnNewBanner: function spawnNewBanner(banner, color) {\n        this.node.addChild(banner, 1, 'banner');\n        if (color) {\n            banner.setPosition(cc.p(10, 364));\n            banner.rotation = 180;\n        } else {\n            banner.setPosition(cc.p(-6, -351));\n        }\n    },\n    soawnRestartButton: function soawnRestartButton() {\n        var self = this;\n        var restart = cc.instantiate(this.restartPrefab);\n        this.node.addChild(restart, 1, 'restart');\n        restart.setPosition(cc.p(0, 0));\n        // restart.on(cc.Node.EventType.MOUSE_DOWN, this.onButtonTouchStart, this);\n        restart.on(cc.Node.EventType.TOUCH_START, this.onButtonTouchStart, this);\n    },\n\n    mapChess: function mapChess(f) {\n        var children = this.node.children;\n        for (var i = 0; i < children.length; ++i) {\n            var chess = children[i].getComponent('chess');\n            if (chess) {\n                f(chess);\n            }\n        }\n    },\n\n    changeChessBreath: function changeChessBreath(color, state, opacity) {\n        this.mapChess(function (chess) {\n            if (!color || chess.color === color) {\n                if (opacity) {\n                    chess.node.opacity = opacity;\n                }\n                chess.breathState = state ? \"up\" : \"stop\";\n            }\n        });\n    },\n\n    changeChessListener: function changeChessListener(color, state) {\n        this.mapChess(function (chess) {\n            if (!color || chess.color === color) {\n                if (state) {\n                    chess.setListeners();\n                } else {\n                    chess.clearListeners();\n                }\n            }\n        });\n    },\n\n    // stopAllChess: function(){\n\n    // },\n\n    onButtonTouchStart: function onButtonTouchStart() {\n        // console.log(\"重新开始\");\n\n        this.newGame();\n    },\n\n    spawnJellies: function spawnJellies() {\n        var jellies = [{\n            size: 'small',\n            name: 'red-1',\n            color: 'red',\n            x: 208,\n            y: 231\n\n        }, {\n            size: 'small',\n            name: 'red-2',\n            color: 'red',\n            x: -208,\n            y: 231\n\n        }, {\n            size: 'small',\n            name: 'red-3',\n            color: 'red',\n            x: 0,\n            y: 231\n\n        }, {\n            size: 'small',\n            name: 'green-1',\n            color: 'green',\n            x: 208,\n            y: -231\n        }, {\n            size: 'small',\n            name: 'green-2',\n            color: 'green',\n            x: -208,\n            y: -231\n        }, {\n            size: 'small',\n            name: 'green-3',\n            color: 'green',\n            x: 0,\n            y: -231\n        }, {\n            size: 'medium',\n            name: 'red-4',\n            color: 'red',\n            x: 180,\n            y: 400\n\n        }, {\n            size: 'medium',\n            name: 'red-5',\n            color: 'red',\n            x: -180,\n            y: 400\n\n        }, {\n            size: 'medium',\n            name: 'green-4',\n            color: 'green',\n            x: 180,\n            y: -400\n        }, {\n            size: 'medium',\n            name: 'green-5',\n            color: 'green',\n            x: -180,\n            y: -400\n        }, {\n            size: 'big',\n            name: 'green-6',\n            color: 'green',\n            x: 0,\n            y: -400\n        }, {\n            size: 'big',\n            name: 'red-6',\n            color: 'red',\n            x: 0,\n            y: 400\n        }];\n\n        var xbias = -5,\n            ybias = 0;\n\n        for (var i = 0; i < jellies.length; ++i) {\n            var item = jellies[i];\n            var jelly = undefined;\n            if (item.color === 'red') {\n                jelly = cc.instantiate(this.redJellyPrefab);\n                this.redCnt += 1;\n            } else {\n                jelly = cc.instantiate(this.greenJellyPrefab);\n                this.greenCnt += 1;\n            }\n            var chess = jelly.getComponent(\"chess\");\n            chess.world = this;\n            chess.mass = _config.config.size[item.size].mass;\n            jelly.scale = _config.config.size[item.size].scale;\n            this.node.addChild(jelly, 1, item.name);\n            // console.log(jelly.getComponent('chess'));\n            // jelly.getComponent('chess').color = item.color;\n            jelly.setPosition(cc.p(item.x + xbias, item.y + ybias));\n        }\n    },\n\n    toggleCheese: function toggleCheese(cheese) {\n        return cheese === 'red' ? 'green' : 'red';\n    },\n\n    newGame: function newGame() {\n        this.redCnt = 0;\n        this.greenCnt = 0;\n        this.node.removeAllChildren();\n\n        this.spawnJellies();\n        this.nowChess = this.firstChess;\n        this.changeChessListener(this.nowChess, true);\n        this.changeChessListener(this.toggleCheese(this.nowChess), false);\n        this.changeChessBreath(this.nowChess, true);\n        this.changeChessBreath(this.toggleCheese(this.nowChess), false);\n        this.firstChess = this.toggleCheese(this.firstChess);\n    },\n\n    checkAllStop: function checkAllStop() {\n        var children = this.node.children;\n        for (var i = 0; i < children.length; ++i) {\n            var chess = children[i].getComponent('chess');\n            if (!chess) {\n                continue;\n            }\n            if (chess.velocityX !== 0 || chess.velocityY !== 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        // console.log('Are you ready?');\n        this.setDrawNode();\n        this.setCollision();\n        this.newGame();\n        // this.node.on('drawIndicator', this.onDrawIndicator, this);\n        // this.node.on('clearIndicator', this.onClearIndicator, this);\n    },\n\n    onDestroy: function onDestroy() {\n        // this.node.off('drawIndicator', this.onDrawIndicator, this);\n        // this.node.off('clearIndicator', this.onClearIndicator, this);\n    },\n\n    onMove: function onMove() {\n        this.isMoving = true;\n        this.changeChessListener(undefined, false);\n        this.changeChessBreath(undefined, false);\n    },\n\n    onMoveEnd: function onMoveEnd() {\n        this.isMoving = false;\n        this.nowChess = this.toggleCheese(this.nowChess);\n        this.changeChessListener(this.nowChess, true);\n        this.changeChessBreath(this.nowChess, true);\n    },\n\n    update: function update(dt) {\n        if (this.isMoving && this.checkAllStop()) {\n            this.onMoveEnd();\n        }\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RFpop();\n},{\"./config\":\"config\"}]},{},[\"collid\",\"config\",\"abstacle\",\"chess\",\"game\"])\n\n","\"use strict\";\ncc._RFpush(module, 'a757adOSftILZOVo213y/Ih', 'chess');\n// Script/chess.js\n\nvar _collid = require('./collid');\n\nvar _config = require('./config');\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        color: {\n            'default': ''\n        },\n        bumpAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n        dropAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n        world: undefined,\n        velocityX: 0,\n        velocityY: 5,\n        otherBall: undefined,\n        mass: 5,\n        // gravity: 9.8,\n        // frictionCoefficient: 0.005,\n        draw: undefined,\n        // maxVelocity: 20,\n        // lengthScaleVelocity: 7.5,\n        // maxlength: 150,\n        minIndicatorWidth: 1.5,\n        maxIndicatorWidth: 6,\n        instantVx: 0,\n        instantVy: 0,\n        breathState: 'up', // up down stop\n        opacityCopy: undefined\n    },\n\n    judgeOut: function judgeOut() {\n        var x = this.node.x;\n        var y = this.node.y;\n\n        var needDestroy = false;\n\n        if (-320 < x < -250) {\n            this.node.opacity = 1.5 * (-x - 282);\n        } else if (x < -319) {\n            needDestroy = true;\n        } else if (320 > x > 260) {\n            this.node.opacity = 1.7 * (x - 260);\n        } else if (x > 319) {\n            needDestroy = true;\n        }\n\n        if (-610 < y < -580) {\n            this.node.opacity = 3.4 * (-y - 580);\n        } else if (y < -609) {\n            needDestroy = true;\n        } else if (630 > y > 590) {\n            this.node.opacity = 2.5 * (y - 590);\n        } else if (y > 629) {\n            needDestroy = true;\n        }\n\n        if (needDestroy) {\n            this.playdropSound();\n            // cc.log('out',this.color);\n            this.world.jellyOut(this.color);\n            cc.removeSelf();\n            this.node.destroy();\n        }\n    },\n\n    bounce: function bounce() {\n        this.velocityX = this.instantVx;\n        this.velocityY = this.instantVy;\n        this.world.onMove();\n    },\n\n    drawIndicator: function drawIndicator(to) {\n        function width(distance, maxlength, minIndicatorWidth, maxIndicatorWidth) {\n            var k = (minIndicatorWidth - maxIndicatorWidth) / (maxlength - 0);\n            var b = maxIndicatorWidth;\n            return k * distance + b;\n        }\n\n        to = cc.p(to.x, to.y);\n        var from = this.node.getPosition();\n        var worldTo = this.node.parent.convertToNodeSpaceAR(to);\n        var worldToInvert = undefined;\n\n        var lineLength = cc.pDistance(from, worldTo);\n        var k = (worldTo.y - from.y) / (worldTo.x - from.x);\n        var b = worldTo.y - k * worldTo.x;\n        var sinFT = (worldTo.x - from.x) / lineLength;\n\n        if (lineLength > _config.config.maxlength) {\n            lineLength = _config.config.maxlength;\n\n            var point1 = undefined,\n                point2 = undefined;\n            if (!isFinite(k)) {\n                point1 = cc.p(from.x, from.y + _config.config.maxlength);\n                point2 = cc.p(from.x, from.y - _config.config.maxlength);\n            } else {\n                var f = from.x;\n                var g = from.y;\n                var r = _config.config.maxlength;\n                var p2 = function p2(x) {\n                    return x * x;\n                };\n                var sqrt = function sqrt(x) {\n                    return Math.sqrt(x);\n                };\n\n                var D = sqrt(-p2(b) - 2 * b * f * k + 2 * b * g - p2(f) * p2(k) + 2 * f * g * k - p2(g) + p2(k) * p2(r) + p2(r));\n                var x1 = (-D - b * k + f + g * k) / (p2(k) + 1);\n                var x2 = (D - b * k + f + g * k) / (p2(k) + 1);\n\n                point1 = cc.p(x1, k * x1 + b);\n                point2 = cc.p(x2, k * x2 + b);\n            }\n            if (cc.pDistanceSQ(point1, worldTo) < cc.pDistanceSQ(point2, worldTo)) {\n                worldTo = point1;\n                worldToInvert = point2;\n            } else {\n                worldTo = point2;\n                worldToInvert = point1;\n            }\n        } else {\n            worldToInvert = cc.pRotateByAngle(worldTo, from, Math.PI);\n        }\n        var arrowLength = 20;\n        var angle = Math.PI / 6;\n\n        this.world.draw.clear();\n\n        var strokeWidth = width(lineLength, _config.config.maxlength, this.minIndicatorWidth, this.maxIndicatorWidth);\n        this.world.draw.drawSegment(from, worldTo, strokeWidth, cc.Color.WHITE);\n\n        // console.log('2', 'sinFT', sinFT, 'k', k, 'b', b);\n        var pointOnLine = undefined;\n        if (!isFinite(k)) {\n            pointOnLine = cc.p(worldToInvert.x, worldToInvert + arrowLength);\n        } else {\n            var x = worldToInvert.x + arrowLength * sinFT;\n            var y = k * x + b;\n            pointOnLine = cc.p(x, y);\n        }\n\n        var arrowToPoint1 = cc.pRotateByAngle(pointOnLine, worldToInvert, angle);\n        var arrowToPoint2 = cc.pRotateByAngle(pointOnLine, worldToInvert, -angle);\n        this.world.draw.drawSegment(worldToInvert, arrowToPoint1, strokeWidth, cc.Color.WHITE);\n        this.world.draw.drawSegment(worldToInvert, arrowToPoint2, strokeWidth, cc.Color.WHITE);\n        this.world.draw.drawSegment(from, worldToInvert, strokeWidth, cc.Color.WHITE);\n        this.world.draw.drawDot(worldTo, strokeWidth * 2, cc.Color.BLUE);\n\n        this.instantVy = (worldToInvert.y - from.y) / _config.config.lengthScaleVelocity;\n        this.instantVx = (worldToInvert.x - from.x) / _config.config.lengthScaleVelocity;\n    },\n\n    clearIndicator: function clearIndicator(event) {\n        this.world.draw.clear();\n    },\n\n    onTouchStart: function onTouchStart(event) {\n        this.world.changeChessBreath(this.color, false, 220);\n        // this.opacityCopy = this.node.opacity;\n        this.node.opacity = 100;\n        this.drawIndicator(event.getLocation());\n    },\n\n    onTouchMove: function onTouchMove(event) {\n        this.drawIndicator(event.getLocation());\n    },\n\n    onTouchEndAndCancel: function onTouchEndAndCancel(event) {\n        // cc.log(\"onTouchEnd\", event);\n        this.node.opacity = 220;\n        this.clearIndicator();\n        this.bounce();\n    },\n\n    onCollisionEnter: function onCollisionEnter(other, self) {\n\n        var otherThis = other.getComponent(\"chess\");\n\n        if (!otherThis) {\n            otherThis = other.getComponent(\"abstacle\");\n        }\n\n        if (otherThis.otherBall) {\n            this.velocityX = otherThis.otherBall.velocityX;\n            this.velocityY = otherThis.otherBall.velocityY;\n            otherThis.otherBall = undefined;\n            return;\n        }\n        this.playbumpSound();\n        var ballSelf = (0, _collid.ballFactory)(this.node.x, this.node.y, this.velocityX, this.velocityY, this.mass);\n        var ballOther = (0, _collid.ballFactory)(other.node.x, other.node.y, otherThis.velocityX, otherThis.velocityY, otherThis.mass);\n        var balls = (0, _collid.collideBalls)(ballSelf, ballOther);\n        this.velocityX = balls.self.velocityX;\n        this.velocityY = balls.self.velocityY;\n        this.otherBall = balls.other;\n    },\n\n    playbumpSound: function playbumpSound() {\n        cc.audioEngine.playEffect(this.bumpAudio, false);\n    },\n    playdropSound: function playdropSound() {\n        cc.audioEngine.playEffect(this.dropAudio, false);\n    },\n\n    setListeners: function setListeners() {\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEndAndCancel, this);\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEndAndCancel, this);\n    },\n\n    clearListeners: function clearListeners() {\n        this.node.off(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\n        this.node.off(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        this.node.off(cc.Node.EventType.TOUCH_END, this.onTouchEndAndCancel, this);\n        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEndAndCancel, this);\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.setListeners();\n    },\n\n    onDestroy: function onDestroy() {\n        this.clearListeners();\n    },\n\n    minusVelocityByFriction: function minusVelocityByFriction(v) {\n        var g = _config.config.gravity,\n            u = _config.config.frictionCoefficient;\n        if (v > 0) {\n            return Math.max(0, v - g * u);\n        }\n\n        if (v === 0) {\n            return 0;\n        }\n\n        if (v < 0) {\n            return Math.min(0, v + g * u);\n        }\n    },\n\n    breath: function breath(deltaTime) {\n        // cc.log('state',this.breathState);\n        // cc.log('')\n        var top = 220;\n        var bottom = 100;\n        var breathTime = 2;\n        if (this.breathState === 'stop') {\n            return;\n        }\n        var deltaOpacity = (top - bottom) / breathTime * deltaTime;\n        // cc.log('dt',deltaTime,'do',deltaOpacity)\n        if (this.breathState === 'up') {\n            // cc.log('up');\n            this.node.opacity = Math.min(this.node.opacity + deltaOpacity, top);\n            this.breathState = this.node.opacity === top ? 'down' : 'up';\n        } else if (this.breathState === 'down') {\n            // cc.log('down');\n            this.node.opacity = Math.max(this.node.opacity - deltaOpacity, bottom);\n            // cc.log('opacity',this.node.opacity);\n            this.breathState = this.node.opacity === bottom ? 'up' : 'down';\n        }\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        this.breath(dt);\n\n        this.node.x += this.velocityX;\n        this.node.y += this.velocityY;\n\n        this.velocityX = this.minusVelocityByFriction(this.velocityX);\n        this.velocityY = this.minusVelocityByFriction(this.velocityY);\n\n        this.judgeOut();\n    }\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '01aa1hC3TxO9Kbjnthibx9c', 'collid');\n// Script/collid.js\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ballFactory = ballFactory;\nexports.collideBalls = collideBalls;\n\nfunction ballFactory(x, y, velocityX, velocityY, mass) {\n    var collisionObj = {};\n    collisionObj.x = x;\n    collisionObj.y = y;\n    // collisionObj.x = x;\n    // collisionObj.y = y;\n    // collisionObj.radius = radius;\n    // collisionObj.speed = speed;\n    // collisionObj.angle = angle;\n    collisionObj.velocityX = velocityX;\n    collisionObj.velocityY = velocityY;\n    collisionObj.mass = mass;\n    return collisionObj;\n}\n\nfunction collideBalls(ball1, ball2) {\n\n    // console.log('ball1',ball1,'ball2',ball2);\n    ball1 = JSON.parse(JSON.stringify(ball1));\n    ball2 = JSON.parse(JSON.stringify(ball2));\n\n    var dx = ball1.x - ball2.x;\n    var dy = ball1.y - ball2.y;\n\n    var collisionAngle = Math.atan2(dy, dx);\n\n    var speed1 = Math.sqrt(ball1.velocityX * ball1.velocityX + ball1.velocityY * ball1.velocityY);\n    var speed2 = Math.sqrt(ball2.velocityX * ball2.velocityX + ball2.velocityY * ball2.velocityY);\n\n    var direction1 = Math.atan2(ball1.velocityY, ball1.velocityX);\n    var direction2 = Math.atan2(ball2.velocityY, ball2.velocityX);\n\n    var velocityX_1 = speed1 * Math.cos(direction1 - collisionAngle);\n    var velocityY_1 = speed1 * Math.sin(direction1 - collisionAngle);\n    var velocityX_2 = speed2 * Math.cos(direction2 - collisionAngle);\n    var velocityY_2 = speed2 * Math.sin(direction2 - collisionAngle);\n\n    var final_velocityX_1 = ((ball1.mass - ball2.mass) * velocityX_1 + (ball2.mass + ball2.mass) * velocityX_2) / (ball1.mass + ball2.mass);\n    var final_velocityX_2 = ((ball1.mass + ball1.mass) * velocityX_1 + (ball2.mass - ball1.mass) * velocityX_2) / (ball1.mass + ball2.mass);\n\n    var final_velocityY_1 = velocityY_1;\n    var final_velocityY_2 = velocityY_2;\n\n    ball1.velocityX = Math.cos(collisionAngle) * final_velocityX_1 + Math.cos(collisionAngle + Math.PI / 2) * final_velocityY_1;\n    ball1.velocityY = Math.sin(collisionAngle) * final_velocityX_1 + Math.sin(collisionAngle + Math.PI / 2) * final_velocityY_1;\n    ball2.velocityX = Math.cos(collisionAngle) * final_velocityX_2 + Math.cos(collisionAngle + Math.PI / 2) * final_velocityY_2;\n    ball2.velocityY = Math.sin(collisionAngle) * final_velocityX_2 + Math.sin(collisionAngle + Math.PI / 2) * final_velocityY_2;\n\n    return {\n        self: ball1,\n        other: ball2\n    };\n}\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '35a6cEY/ZNNNpab0MNhHwnJ', 'config');\n// Script/config.js\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar config = (function () {\n    var maxVelocity = 15,\n        maxlength = 150,\n        lengthScaleVelocity = maxlength / maxVelocity,\n        gravity = 9.8,\n        frictionCoefficient = 0.005;\n\n    return {\n        maxVelocity: maxVelocity,\n        maxlength: maxlength,\n        lengthScaleVelocity: lengthScaleVelocity,\n        gravity: gravity,\n        frictionCoefficient: frictionCoefficient,\n        size: {\n            small: {\n                scale: 0.3,\n                mass: 2\n            },\n            medium: {\n                scale: 0.4,\n                mass: 5\n            },\n            big: {\n                scale: 0.6,\n                mass: 10\n            }\n        }\n    };\n})();\nexports.config = config;\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'b41ffrKsfZKiIM9N/TEIHCC', 'game');\n// Script/game.js\n\nvar _config = require('./config');\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        greenJellyPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        redJellyPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        world: {\n            'default': null\n        },\n        victoryPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        failurePrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        restartPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        draw: undefined,\n        greenCnt: 0,\n        redCnt: 0,\n        firstChess: \"green\",\n        nowChess: undefined,\n        isMoving: false\n    },\n\n    setCollision: function setCollision() {\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n        // manager.enabledDebugDraw = true;\n    },\n\n    setDrawNode: function setDrawNode() {\n        this.draw = new cc.DrawNode();\n        this.node._sgNode.addChild(this.draw);\n    },\n\n    jellyOut: function jellyOut(color) {\n        if (color === 'red') {\n            // cc.log('red before', this.redCnt);\n\n            this.redCnt -= 1;\n            // cc.log('red', this.redCnt);\n        } else {\n                // cc.log('green before',this.greenCnt);\n\n                this.greenCnt -= 1;\n                // cc.log('green',this.greenCnt);\n            }\n\n        this.checkGameEnd();\n    },\n\n    checkGameEnd: function checkGameEnd() {\n        if (this.redCnt <= 0 && this.greenCnt > 0) {\n            this.spawnNewBanner(cc.instantiate(this.failurePrefab), 1);\n            this.spawnNewBanner(cc.instantiate(this.victoryPrefab), 0);\n            this.changeChessListener(undefined, false);\n            this.soawnRestartButton();\n        } else if (this.greenCnt <= 0 && this.redCnt > 0) {\n            this.spawnNewBanner(cc.instantiate(this.failurePrefab), 0);\n            this.spawnNewBanner(cc.instantiate(this.victoryPrefab), 1);\n            this.changeChessListener(undefined, false);\n            this.soawnRestartButton();\n        }\n    },\n\n    spawnNewBanner: function spawnNewBanner(banner, color) {\n        this.node.addChild(banner, 1, 'banner');\n        if (color) {\n            banner.setPosition(cc.p(10, 364));\n            banner.rotation = 180;\n        } else {\n            banner.setPosition(cc.p(-6, -351));\n        }\n    },\n    soawnRestartButton: function soawnRestartButton() {\n        var self = this;\n        var restart = cc.instantiate(this.restartPrefab);\n        this.node.addChild(restart, 1, 'restart');\n        restart.setPosition(cc.p(0, 0));\n        // restart.on(cc.Node.EventType.MOUSE_DOWN, this.onButtonTouchStart, this);\n        restart.on(cc.Node.EventType.TOUCH_START, this.onButtonTouchStart, this);\n    },\n\n    mapChess: function mapChess(f) {\n        var children = this.node.children;\n        for (var i = 0; i < children.length; ++i) {\n            var chess = children[i].getComponent('chess');\n            if (chess) {\n                f(chess);\n            }\n        }\n    },\n\n    changeChessBreath: function changeChessBreath(color, state, opacity) {\n        this.mapChess(function (chess) {\n            if (!color || chess.color === color) {\n                if (opacity) {\n                    chess.node.opacity = opacity;\n                }\n                chess.breathState = state ? \"up\" : \"stop\";\n            }\n        });\n    },\n\n    changeChessListener: function changeChessListener(color, state) {\n        this.mapChess(function (chess) {\n            if (!color || chess.color === color) {\n                if (state) {\n                    chess.setListeners();\n                } else {\n                    chess.clearListeners();\n                }\n            }\n        });\n    },\n\n    // stopAllChess: function(){\n\n    // },\n\n    onButtonTouchStart: function onButtonTouchStart() {\n        // console.log(\"重新开始\");\n\n        this.newGame();\n    },\n\n    spawnJellies: function spawnJellies() {\n        var jellies = [{\n            size: 'small',\n            name: 'red-1',\n            color: 'red',\n            x: 208,\n            y: 231\n\n        }, {\n            size: 'small',\n            name: 'red-2',\n            color: 'red',\n            x: -208,\n            y: 231\n\n        }, {\n            size: 'small',\n            name: 'red-3',\n            color: 'red',\n            x: 0,\n            y: 231\n\n        }, {\n            size: 'small',\n            name: 'green-1',\n            color: 'green',\n            x: 208,\n            y: -231\n        }, {\n            size: 'small',\n            name: 'green-2',\n            color: 'green',\n            x: -208,\n            y: -231\n        }, {\n            size: 'small',\n            name: 'green-3',\n            color: 'green',\n            x: 0,\n            y: -231\n        }, {\n            size: 'medium',\n            name: 'red-4',\n            color: 'red',\n            x: 180,\n            y: 400\n\n        }, {\n            size: 'medium',\n            name: 'red-5',\n            color: 'red',\n            x: -180,\n            y: 400\n\n        }, {\n            size: 'medium',\n            name: 'green-4',\n            color: 'green',\n            x: 180,\n            y: -400\n        }, {\n            size: 'medium',\n            name: 'green-5',\n            color: 'green',\n            x: -180,\n            y: -400\n        }, {\n            size: 'big',\n            name: 'green-6',\n            color: 'green',\n            x: 0,\n            y: -400\n        }, {\n            size: 'big',\n            name: 'red-6',\n            color: 'red',\n            x: 0,\n            y: 400\n        }];\n\n        var xbias = -5,\n            ybias = 0;\n\n        for (var i = 0; i < jellies.length; ++i) {\n            var item = jellies[i];\n            var jelly = undefined;\n            if (item.color === 'red') {\n                jelly = cc.instantiate(this.redJellyPrefab);\n                this.redCnt += 1;\n            } else {\n                jelly = cc.instantiate(this.greenJellyPrefab);\n                this.greenCnt += 1;\n            }\n            var chess = jelly.getComponent(\"chess\");\n            chess.world = this;\n            chess.mass = _config.config.size[item.size].mass;\n            jelly.scale = _config.config.size[item.size].scale;\n            this.node.addChild(jelly, 1, item.name);\n            // console.log(jelly.getComponent('chess'));\n            // jelly.getComponent('chess').color = item.color;\n            jelly.setPosition(cc.p(item.x + xbias, item.y + ybias));\n        }\n    },\n\n    toggleCheese: function toggleCheese(cheese) {\n        return cheese === 'red' ? 'green' : 'red';\n    },\n\n    newGame: function newGame() {\n        this.redCnt = 0;\n        this.greenCnt = 0;\n        this.node.removeAllChildren();\n\n        this.spawnJellies();\n        this.nowChess = this.firstChess;\n        this.changeChessListener(this.nowChess, true);\n        this.changeChessListener(this.toggleCheese(this.nowChess), false);\n        this.changeChessBreath(this.nowChess, true);\n        this.changeChessBreath(this.toggleCheese(this.nowChess), false);\n        this.firstChess = this.toggleCheese(this.firstChess);\n    },\n\n    checkAllStop: function checkAllStop() {\n        var children = this.node.children;\n        for (var i = 0; i < children.length; ++i) {\n            var chess = children[i].getComponent('chess');\n            if (!chess) {\n                continue;\n            }\n            if (chess.velocityX !== 0 || chess.velocityY !== 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        // console.log('Are you ready?');\n        this.setDrawNode();\n        this.setCollision();\n        this.newGame();\n        // this.node.on('drawIndicator', this.onDrawIndicator, this);\n        // this.node.on('clearIndicator', this.onClearIndicator, this);\n    },\n\n    onDestroy: function onDestroy() {\n        // this.node.off('drawIndicator', this.onDrawIndicator, this);\n        // this.node.off('clearIndicator', this.onClearIndicator, this);\n    },\n\n    onMove: function onMove() {\n        this.isMoving = true;\n        this.changeChessListener(undefined, false);\n        this.changeChessBreath(undefined, false);\n    },\n\n    onMoveEnd: function onMoveEnd() {\n        this.isMoving = false;\n        this.nowChess = this.toggleCheese(this.nowChess);\n        this.changeChessListener(this.nowChess, true);\n        this.changeChessBreath(this.nowChess, true);\n    },\n\n    update: function update(dt) {\n        if (this.isMoving && this.checkAllStop()) {\n            this.onMoveEnd();\n        }\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RFpop();"],"sourceRoot":"/source/"}